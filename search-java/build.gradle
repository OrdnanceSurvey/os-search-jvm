apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'signing'

version =  '0.1.0-SNAPSHOT'
group = 'uk.os.search'

// tag::repositories[]
repositories {
    mavenCentral()
}
// end::repositories[]

// tag::jar[]
jar {
    baseName = 'search'
}
// end::jar[]

compileJava {
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
}

configurations {
    provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

// tag::dependencies[]
dependencies {
    compile 'javax.inject:javax.inject:1'
    compile 'com.esri.geometry:esri-geometry-api:1.2'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'io.reactivex:rxjava:1.1.1'
    testCompile 'junit:junit:4.12'
}
// end::dependencies[]

// tag::wrapper[]
task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}
// end::wrapper[]

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = false
}

/**
 * Note: to upload the archive the developer must specify the username and password in their gradle
 * properties file:
 *    ~/.gradle/gradle.properties
 *       mavenUser=admin
 *       mavenPassword=myAdminPassword
 *
 * Alternative: it is possible to pass in a property to the build like the following.
 *
 *    ./gradle uploadArchives -PsonatypeUsername=MysticalDeployer -PsonatypePassword=password1
 *
 *    authentication(userName: project.hasProperty("sonatypeUsername") ?
 *              project.sonatypeUsername : null, password: project.hasProperty("sonatypePassword") ?
 *              project.sonatypePassword : null)
 *
 */
uploadArchives {

    repositories.mavenDeployer {

        beforeDeployment { MavenDeployment deployment ->
            signing.signPom(deployment)
        }

        // Ensure gradle works without properties defined
        ext.mavenUser = project.hasProperty('mavenUser') ? project.getProperty('mavenUser') : 'unspecified'
        ext.mavenPassword = project.hasProperty('mavenPassword') ? project.getProperty('mavenPassword') : 'unspecified'

        repository (url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
            authentication (userName: mavenUser, password: mavenPassword)
        }

        snapshotRepository (url: "https://oss.sonatype.org/content/repositories/snapshots") {
            authentication (userName: mavenUser, password: mavenPassword)
        }

        pom.project {
            name 'OS Java Search API'
            packaging 'jar'
            description 'Simple API to access search API'
            delegate.url 'http://www.ordnancesurvey.co.uk/business-and-government/products/names-and-gazetteer-products.html'

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            scm {
                delegate.url 'scm:git@github.com:OrdnanceSurvey/search-jvm.git'
                connection 'scm:git@github.com:OrdnanceSurvey/search-jvm.git'
                developerConnection 'scm:git@github.com:OrdnanceSurvey/search-jvm.git'
            }

            developers {
                developer {
                    id 'snodnipper'
                    name 'Snodnipper'
                }
                developer {
                    id 'shritekale'
                    name 'Shrikantreddy Tekale'
                }
            }
        }
    }
}

javadoc {
    options.charSet = 'UTF-8'
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}
task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives packageJavadoc
    archives packageSources
}

signing {
    sign configurations.archives
}
